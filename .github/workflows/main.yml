# name: CI/CD Pipeline for NestJS Application

# on:
#   push:
#     branches: [main]

# jobs:
#   # Build and Push Docker Image
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Login to DockerHub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       - name: Build, tag, and push image to DockerHub
#         env:
#           DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#           IMAGE_NAME: nestjs-image
#         run: |
#           docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME .
#           docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:latest

#   # Linting with ESLint
#   lint:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '21'
#       - name: Install dependencies for linting
#         run: npm install
#       - name: Lint with ESLint
#         run: npx eslint . --fix

#   # Testing with Jest
#   test:
#     runs-on: ubuntu-latest
#     needs: lint
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '21'
#       - name: Install dependencies
#         run: npm install
#       - name: Run tests
#         run: npm run test

#   # Security Auditing with npm audit
#   security:
#     runs-on: ubuntu-latest
#     needs: test
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '21'
#       - name: Install dependencies
#         run: npm install
#       - name: Run security audit
#         run: npm audit --production



name: CI/CD Pipeline for NestJS Application

on:
  push:
    branches: [main]

jobs:
  # Build and Push Docker Image
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build, tag, and push image to DockerHub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          IMAGE_NAME: nestjs-image
        run: |
          docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME .
          docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:latest
      - name: Clean up Docker Builder cache
        run: docker builder prune --all --force

        

  # Linting with ESLint
  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21'
      - name: Install dependencies for linting
        run: npm install
      - name: Lint with ESLint
        run: npx eslint . --fix

  # Testing with Jest
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21'
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm run test

  # Snyk Dependency Scanning
  snyk:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21'
      - name: Install Snyk
        run: npm install -g snyk
      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
      - name: Run Snyk to check for vulnerabilities
        run: snyk test --all-projects --severity-threshold=medium
      - name: Monitor for new vulnerabilities
        run: snyk monitor

  # OWASP ZAP Dynamic Application Security Testing (DAST)
  owasp-zap:
    runs-on: ubuntu-latest
    needs: snyk
    steps:
        - name: Checkout code
          uses: actions/checkout@v2
    
    # Build the Docker image for the app
        - name: Build Docker image
          run: docker build -t nestjs-app .

    # Run the Docker container with the app
        - name: Start app in Docker
          run: docker run -d -p 3000:3000 nestjs-app
    # Add wait time to ensure the app is running
        - name: Wait for the app to be ready
          run: sleep 15  # Wait for 15 seconds for the app to start

    # Pull the latest OWASP ZAP Docker image from GitHub Container Registry
        - name: Pull OWASP ZAP Docker image
          run: docker pull ghcr.io/zaproxy/zaproxy:latest

        # Run OWASP ZAP scan using the pulled image
        - name: OWASP ZAP Scan
          run: |
           docker run -t --rm \
           -v $(pwd):/zap/wrk:rw \
           -u zap \
           ghcr.io/zaproxy/zaproxy:latest \
           zap-full-scan.py \
           -t http://localhost:3000 \
           -r zap_report.html

    # Stop the running app container after the scan
        - name: Stop app container
          run: docker stop $(docker ps -q --filter ancestor=nestjs-app)
  
#   owasp-zap:
#     runs-on: ubuntu-latest
#     needs: snyk
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
      
#       # Optional: Log in to Docker Hub (if using a private Docker image)
#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
#       # Build the Docker image for the app
#       - name: Build Docker image
#         run: docker build -t nestjs-app .
      
#       # Run the Docker container with the app
#       - name: Start app in Docker
#         run: docker run -d -p 3000:3000 nestjs-app
      
#       # Run OWASP ZAP Security Scan
#       - name: OWASP ZAP Scan
#         uses: zaproxy/action-full-scan@v0.2.0
#         with:
#           target: 'http://localhost:3000'
#           docker-image: 'ghcr.io/zaproxy/zaproxy:stable'
          
      
#       # Stop the running app container after the scan
#       - name: Stop app container
#         run: |
#           docker ps -q --filter ancestor=nestjs-app | xargs -r docker stop