# name: CI/CD Pipeline for NestJS Application

# on:
#   push:
#     branches: [main]

# jobs:
#   # Build and Push Docker Image
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Login to DockerHub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       - name: Build, tag, and push image to DockerHub
#         env:
#           DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#           IMAGE_NAME: nestjs-image
#         run: |
#           docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME .
#           docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:latest

#   # Linting with ESLint
#   lint:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '21'
#       - name: Install dependencies for linting
#         run: npm install
#       - name: Lint with ESLint
#         run: npx eslint . --fix

#   # Testing with Jest
#   test:
#     runs-on: ubuntu-latest
#     needs: lint
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '21'
#       - name: Install dependencies
#         run: npm install
#       - name: Run tests
#         run: npm run test

#   # Security Auditing with npm audit
#   security:
#     runs-on: ubuntu-latest
#     needs: test
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '21'
#       - name: Install dependencies
#         run: npm install
#       - name: Run security audit
#         run: npm audit --production



name: CI/CD Pipeline for NestJS Application

on:
  push:
    branches: [main]

jobs:
  # Build and Push Docker Image
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build, tag, and push image to DockerHub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          IMAGE_NAME: nestjs-image
        run: |
          docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME .
          docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:latest
      # - name: Clean up Docker Builder cache
      #   run: docker builder prune --all --force

        

  # Linting with ESLint
  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21'
      - name: Install dependencies for linting
        run: npm install
      - name: Lint with ESLint
        run: npx eslint . --fix

  # Testing with Jest
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21'
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm run test

#   # Snyk Dependency Scanning
#   snyk:
#     runs-on: ubuntu-latest
#     needs: test
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '21'
#       - name: Install Snyk
#         run: npm install -g snyk
#       - name: Authenticate Snyk
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         run: snyk auth ${{ secrets.SNYK_TOKEN }}
#       - name: Run Snyk to check for vulnerabilities
#         run: snyk test --all-projects --severity-threshold=medium
#       - name: Monitor for new vulnerabilities
#         run: snyk monitor

  # OWASP ZAP Dynamic Application Security Testing (DAST)
  # sonarqube:
  #   name: SonarQube Scan
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Checkout the code
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     # Set up Node.js
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '16'  # or whatever version you are using

  #     # Install dependencies
  #     - name: Install dependencies
  #       run: npm install

  #     # Run unit tests (optional, but recommended)
  #     - name: Run unit tests
  #       run: npm test

  #     # SonarQube Scanner
  #     - name: SonarQube Scan
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       run: |
  #         npm install --global sonarqube-scanner
  #         sonar-scanner \
  #           -Dsonar.projectKey=my-nestjs-project \
  #           -Dsonar.sources=. \
  #           -Dsonar.host.url=https://your-sonarqube-server.com \
  #           -Dsonar.login=${{ secrets.SONAR_TOKEN }}




  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}





  
  # SonarCloud:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0  # Required to get a full clone to analyze git history

  #     - name: SonarCloud Scan
  #       uses: sonarsource/sonarcloud-github-action@master
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       with:
  #         args: >
  #           -Dsonar.organization=adilsajjad202018
  #           -Dsonar.projectKey=adilsajjad202018_Demo-NestJs-app
  #           -Dsonar.branch.name=main
              
  owasp-zap:
    runs-on: ubuntu-latest
    needs: sonarcloud
   
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Build the Docker image for the app
      - name: Build Docker image
        run: docker build -t nestjs-app .

      # Create a custom Docker network
      - name: Create Docker network
        run: docker network create zap-network

      # Run the Docker container with the app in the custom network
      - name: Start app in Docker
        run: docker run -d --network zap-network --name nestjs-app -p 3000:3000 nestjs-app

      # Wait for the app to be fully up and running
      - name: Wait for the app to be ready
        run: sleep 30

      # Pull the latest OWASP ZAP Docker image from GitHub Container Registry
      - name: Pull OWASP ZAP Docker image
        run: docker pull ghcr.io/zaproxy/zaproxy:latest

      # Run OWASP ZAP scan using the pulled image within the same network
      - name: Run OWASP ZAP Scan
        run: |
         docker run -t --rm \
         --network zap-network \
         -v $(pwd):/zap/wrk:rw \
         -u zap \
         ghcr.io/zaproxy/zaproxy:latest \
         zap-full-scan.py \
         -t http://nestjs-app:3000 \
         -r zap_report.html
        continue-on-error: true
    

      # Stop the running app container after the scan
      - name: Stop app container
        run: docker stop $(docker ps -q --filter ancestor=nestjs-app)

      # Remove the Docker network
      - name: Remove Docker network
        run: docker network rm zap-network
  
#   owasp-zap:
#     runs-on: ubuntu-latest
#     needs: snyk
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
      
#       # Optional: Log in to Docker Hub (if using a private Docker image)
#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
#       # Build the Docker image for the app
#       - name: Build Docker image
#         run: docker build -t nestjs-app .
      
#       # Run the Docker container with the app
#       - name: Start app in Docker
#         run: docker run -d -p 3000:3000 nestjs-app
      
#       # Run OWASP ZAP Security Scan
#       - name: OWASP ZAP Scan
#         uses: zaproxy/action-full-scan@v0.2.0
#         with:
#           target: 'http://localhost:3000'
#           docker-image: 'ghcr.io/zaproxy/zaproxy:stable'
          
      
#       # Stop the running app container after the scan
#       - name: Stop app container
#         run: |
#           docker ps -q --filter ancestor=nestjs-app | xargs -r docker stop
  deploy:
    runs-on: ubuntu-latest  # Runner that executes the deployment job
    needs: owasp-zap  
    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Checks out the repository under $GITHUB_WORKSPACE

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}  # Private key to access your server

    - name: Deploy to Server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@18.209.59.157 'cd ${{ secrets.DEPLOY_PATH }} && ./deploy_script.sh'


        